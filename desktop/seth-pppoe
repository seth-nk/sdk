#!/bin/sh
#
# seth-pppoe modified from pppoe-connect
#
# ../scripts/pppoe-connect.  Generated from pppoe-connect.in by configure.
#***********************************************************************
#
# pppoe-connect
#
# Shell script to connect to a PPPoE provider
#
# Copyright (C) 2000 Roaring Penguin Software Inc.
#
# $Id$
#
# This file may be distributed under the terms of the GNU General
# Public License.
#
# LIC: GPL
#
# Usage: pppoe-connect [config_file]
#        pppoe-connect interface user [config_file]
# Second form overrides USER and ETH from config file.
# If config_file is omitted, defaults to /etc/ppp/pppoe.conf
#
#***********************************************************************



# modifed by
# copyright 2019 NSWA Maintainers
# copyright 2019 The-Seth-Project
# LIC: GPL
# This is free software with ABSOLUTELY NO WARRANTY.

if test "$1" = "--hangup" ; then
	pid=`pgrep pppd`
	if test -z "$pid" ; then
		exit 0
	fi
	kill "$pid"
	exit $?
fi

if test "$1" = '' ; then
	exit 1
fi

ETH="$1"
USER="$2"
PASSWORD="$3"
IFNAME='seth'
LINUX_KERNEL_MODE="$4"

LINUX_PLUGIN=''

if test "$LINUX_KERNEL_MODE" = '1' ; then
	if test -f /etc/ppp/plugins/rp-pppoe.so ; then
		LINUX_PLUGIN='/etc/ppp/plugins/rp-pppoe.so'
	elif test -f /usr/lib/pppd/2.4.7/rp-pppoe.so ; then
		LINUX_PLUGIN='/usr/lib/pppd/2.4.7/rp-pppoe.so'
	else
		echo "Kernel mode rp-pppoe not supported for your system. please try go back to U=user mode"
		exit 1
	fi
fi

#***********************************************************************

IFCONFIG=/sbin/ifconfig
PPPD=/usr/sbin/pppd
SETSID=/usr/bin/setsid
PPPOE=/usr/sbin/pppoe
LOGGER="/usr/bin/logger -t seth-pppoe"

LANG=C
export LANG

if test "`/usr/bin/id -u`" != 0 ; then
	echo "root only please" >& 2
	exit 1
fi

if test "$SETSID" != "" -a ! -x "$SETSID"; then
	SETSID=""
fi

DEMAND=no
DNSTYPE=NOCHANGE
PEERDNS=yes
DNS1=
DNS2=
DEFAULTROUTE=yes
CONNECT_TIMEOUT=30
CONNECT_POLL=2
ACNAME=
SERVICENAME=
PING="."
SYNCHRONOUS=no
CLAMPMSS=1412
LCP_INTERVAL=20
LCP_FAILURE=3
PPPOE_TIMEOUT=80
FIREWALL=NONE
PPPOE_EXTRA=""
PPPD_EXTRA=""
RETRY_ON_FAILURE=no

PPPOE_PIDFILE="/var/lock/pppoe.pid"
PPPD_PIDFILE="/var/lock/pppd.pid"

PPPD_PID=0


if test `uname -s` = Linux ; then
	$IFCONFIG $ETH up mtu 1500
	modprobe ppp_generic > /dev/null 2>&1
	modprobe ppp_async > /dev/null 2>&1
	modprobe ppp_synctty > /dev/null 2>&1
	if test -n "$LINUX_PLUGIN" ; then
		modprobe pppox > /dev/null 2>&1
		modprobe pppoe > /dev/null 2>&1
	fi
fi

if test "$SYNCHRONOUS" = "yes" ; then
    PPPOE_SYNC=-s
    PPPD_SYNC=sync
	# Increase the chances of it working on Linux...
    if test `uname -s` = Linux ; then
	modprobe n_hdlc > /dev/null 2>&1
    fi
else
    PPPOE_SYNC=""
    PPPD_SYNC=""
fi

if test -n "$ACNAME" ; then
    ACNAME="-C $ACNAME"
fi

if test -n "$SERVICENAME" ; then
    SERVICENAMEOPT="-S $SERVICENAME"
else
    SERVICENAMEOPT=""
fi

if test "$CLAMPMSS" = "no" ; then
    CLAMPMSS=""
else
    CLAMPMSS="-m $CLAMPMSS"
fi

# If DNSTYPE is SERVER, we must use "usepeerdns" option to pppd.
if test "$DNSTYPE" = "SERVER" ; then
    PEERDNS=yes
    USEPEERDNS=yes
fi

if test "$PEERDNS" = "yes" ; then
    PEERDNS="usepeerdns"
else
    PEERDNS=""
fi

# Backward config file compatibility -- PEERDNS used to be USEPEERDNS
if test "$USEPEERDNS" = "yes" ; then
    PEERDNS="usepeerdns"
fi
if test "$USEPEERDNS" = "no" ; then
    PEERDNS=""
fi


# Backward config file compatibility
if test "$DEMAND" = "" ; then
    DEMAND=no
fi

if test "$DEMAND" = "no" ; then
    DEMAND=""
else
    DEMAND="demand persist idle $DEMAND 10.112.112.112:10.112.112.113 ipcp-accept-remote ipcp-accept-local connect true noipdefault ktune"
fi

case "$FIREWALL" in
    STANDALONE)
    . /etc/ppp/firewall-standalone
    ;;
    MASQUERADE)
    . /etc/ppp/firewall-masq
    ;;
esac

# If we're using kernel-mode PPPoE on Linux...
if test "$LINUX_PLUGIN" != "" ; then
    PLUGIN_OPTS="plugin $LINUX_PLUGIN nic-$ETH"
    if test -n "$SERVICENAME" ; then
	PLUGIN_OPTS="$PLUGIN_OPTS rp_pppoe_service $SERVICENAME"
    fi
    modprobe pppoe > /dev/null 2>&1
fi

if test "$DEFAULTROUTE" != "no" ; then
    DEFAULTROUTE="defaultroute"
else
    DEFAULTROUTE=""
fi

# Standard PPP options we always use
PPP_STD_OPTIONS="$PLUGIN_OPTS noipdefault noauth default-asyncmap $DEFAULTROUTE hide-password nodetach $PEERDNS mtu 1492 mru 1492 noaccomp nodeflate nopcomp novj novjccomp user $USER lcp-echo-interval $LCP_INTERVAL lcp-echo-failure $LCP_FAILURE $PPPD_EXTRA"

# Jigger DNS if required...
if test "$DNSTYPE" = "SERVER" ; then
    # Sorry, dude...
    rm -f /etc/resolv.conf
    ln -s /etc/ppp/resolv.conf /etc/resolv.conf
elif test "$DNSTYPE" = "SPECIFY" ; then
    # Sorry, dude...
    rm -f /etc/resolv.conf
    echo "nameserver $DNS1" > /etc/resolv.conf
    if test -n "$DNS2" ; then
	echo "nameserver $DNS2" >> /etc/resolv.conf
    fi
fi

# PPPoE invocation
PPPOE_CMD="$PPPOE -p $PPPOE_PIDFILE -I $ETH -T $PPPOE_TIMEOUT -U $PPPOE_SYNC $CLAMPMSS $ACNAME $SERVICENAMEOPT $PPPOE_EXTRA"

while [ true ] ; do
    if test "$LINUX_PLUGIN" != "" ; then
	    $SETSID $PPPD \
            $PLUGIN_OPTS noipdefault noauth default-asyncmap $DEFAULTROUTE hide-password updetach $PEERDNS mtu 1492 mru 1492 noaccomp nodeflate nopcomp novj novjccomp user "$USER" password "$PASSWORD" lcp-echo-interval $LCP_INTERVAL lcp-echo-failure $LCP_FAILURE $PPPD_EXTRA ifname $IFNAME \
            $DEMAND
    else
	    $SETSID $PPPD pty "$PPPOE_CMD" \
	        $PLUGIN_OPTS noipdefault noauth default-asyncmap $DEFAULTROUTE hide-password updetach $PEERDNS mtu 1492 mru 1492 noaccomp nodeflate nopcomp novj novjccomp user "$USER" password "$PASSWORD" lcp-echo-interval $LCP_INTERVAL lcp-echo-failure $LCP_FAILURE $PPPD_EXTRA ifname $IFNAME \
	        $DEMAND \
	        $PPPD_SYNC
    fi
    exit $?
done
